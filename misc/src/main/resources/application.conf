//akka.stream.materializer.debug.fuzzing-mode = on

parallel-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    parallelism-min = 1
    # No of core threads ... ceil(available processors * factor)
    parallelism-factor = 2
    # maximum number of threads to cap factor-based number to
    parallelism-max = 16
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 1
}

parallel-fork-join-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 1
    parallelism-factor = 2
    parallelism-max = 16
  }
  throughput = 1
}

single-fork-join-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    core-pool-size-min = 1
    core-pool-size-factor = 1
    core-pool-size-max = 1
  }
  throughput = 1
}

multi-thread-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 8
  }
  throughput = 1
}

single-thread-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 1
  }
  throughput = 100
}

akka {
  loglevel = "DEBUG"

  actor {
    default-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 1
      }
      throughput = 100
    }

//    deployment {
//      "/router/*" {
//        dispatcher = single-thread-dispatcher
//      }
//      "/system/IO-*" {
//        dispatcher = single-thread-dispatcher
//      }
//    }
  }
}